from __future__ import annotations

import secrets
from datetime import datetime, timedelta, timezone
from typing import Optional

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message

from partyshare.config import get_settings
from partyshare.db.repo import get_global_repository
from partyshare.keyboards import build_events_keyboard, manage_keyboard
from partyshare.services.authz import assert_event_owner, assert_event_participant
from partyshare.services.events import (
    build_event_cards,
    format_event_card,
    humanize_status,
    next_status,
)
from partyshare.services.split import ExpenseItemShare, ExpenseShare, calculate_balances
from partyshare.services.settlement import settle
from partyshare.state import OWNER_VIEW, PARTICIPANT_VIEW, state
from partyshare.utils.parse import parse_event_datetime, parse_russian_date
from partyshare.db.models import ParticipantStatus

events_router = Router()


def get_repo():
    return get_global_repository()


@events_router.callback_query(lambda c: c.data == "menu:myevents")
async def cb_menu_myevents(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    repo = get_repo()
    user = callback.from_user
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥–¥–µ –æ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫)
    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    owner_events = await repo.list_owner_events(user_id)
    participant_events = await repo.list_participant_events(user_id)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    event_ids_seen = set()
    events = []
    for event in owner_events:
        if event['id'] not in event_ids_seen:
            events.append(event)
            event_ids_seen.add(event['id'])
    for event in participant_events:
        if event['id'] not in event_ids_seen:
            events.append(event)
            event_ids_seen.add(event['id'])

    if not events:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="menu:newevent")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:main")]
        ])
        await callback.message.edit_text(
            "üìÖ <b>–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.\n"
            "–°–æ–∑–¥–∞–π –ø–µ—Ä–≤–æ–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É!",
            reply_markup=keyboard
        )
    else:
        cards = await build_event_cards(repo, events, user_id)
        keyboard = build_events_keyboard(
            events,
            cards,
            is_owner_view=True,
            page_size=5,
            page=0
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:main")]
        )
        
        await callback.message.edit_text(
            "üìÖ <b>–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    
    await callback.answer()


@events_router.callback_query(lambda c: c.data == "menu:newevent")
async def cb_menu_newevent(callback: CallbackQuery) -> None:
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è - –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è"""
    user = callback.from_user
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è" –∏ —à–∞–≥ "–Ω–∞–∑–≤–∞–Ω–∏–µ"
    state.set_creating_event(user.id)
    state.set_event_step(user.id, "title")
    state.clear_event_data(user.id)
    
    text = (
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
        "üìù <b>–®–∞–≥ 1/4: –ù–∞–∑–≤–∞–Ω–∏–µ</b>\n\n"
        "–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º —Å–æ–±—ã—Ç–∏–µ?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ú–∞–∫—Å–∞</i> –∏–ª–∏ <i>–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤</i>"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu:cancel_create")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@events_router.callback_query(lambda c: c.data == "menu:cancel_create")
async def cb_cancel_create(callback: CallbackQuery) -> None:
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    user = callback.from_user
    if user:
        state.clear_creating_event(user.id)
        state.clear_event_data(user.id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_name = callback.from_user.first_name if callback.from_user else "–¥—Ä—É–≥"
    from partyshare.handlers.basic import get_main_menu_keyboard
    await callback.message.edit_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø <b>PartyShare</b> ‚Äî –ø–æ–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ —á–µ—Å—Ç–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


@events_router.callback_query(lambda c: c.data == "event:skip_location")
async def cb_skip_location(callback: CallbackQuery) -> None:
    """–ü—Ä–æ–ø—É—Å–∫ —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–∞"""
    user = callback.from_user
    if not user:
        return
    
    state.set_event_step(user.id, "notes")
    
    await callback.message.edit_text(
        "‚úÖ –ú–µ—Å—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ!\n\n"
        "üìã <b>–®–∞–≥ 4/4: –ó–∞–º–µ—Ç–∫–∏</b>\n\n"
        "–ï—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ü—Ä–∏–Ω–æ—Å–∏—Ç–µ –ø–æ–¥–∞—Ä–∫–∏!</i> –∏–ª–∏ <i>–î—Ä–µ—Å—Å-–∫–æ–¥: casual</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="event:skip_notes")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu:cancel_create")]
        ])
    )
    await callback.answer()


@events_router.callback_query(lambda c: c.data == "event:skip_notes")
async def cb_skip_notes(callback: CallbackQuery) -> None:
    """–ü—Ä–æ–ø—É—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    user = callback.from_user
    if not user or not callback.message:
        return
    
    repo = get_repo()
    await create_event_from_data(callback.message, repo, user)
    await callback.answer("–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")


@events_router.callback_query(lambda c: c.data == "menu:addexpense")
async def cb_menu_addexpense(callback: CallbackQuery) -> None:
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ä–∞—Å—Ö–æ–¥–∞"""
    text = (
        "üí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞</b>\n\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>/addexpense [event_id] | [–Ω–∞–∑–≤–∞–Ω–∏–µ] | [—Å—É–º–º–∞ –≤–∞–ª—é—Ç–∞] | shared/items</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>/addexpense 1 | –ü–∏—Ü—Ü–∞ | 2500 RUB | shared</code>\n\n"
        "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        "‚Ä¢ event_id - ID —Å–æ–±—ã—Ç–∏—è (–Ω–∞–π–¥–∏ –≤ —Å–ø–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π)\n"
        "‚Ä¢ –Ω–∞–∑–≤–∞–Ω–∏–µ - —á—Ç–æ –∫—É–ø–∏–ª–∏\n"
        "‚Ä¢ —Å—É–º–º–∞ - —á–∏—Å–ª–æ –∏ –≤–∞–ª—é—Ç–∞ (RUB, EUR, USD)\n"
        "‚Ä¢ shared - –¥–µ–ª–∏—Ç—å –ø–æ—Ä–æ–≤–Ω—É\n"
        "‚Ä¢ items - –¥–µ–ª–∏—Ç—å –ø–æ –ø–æ–∑–∏—Ü–∏—è–º\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è:"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è", callback_data="menu:myevents")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:main")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


def format_event_details(event, participants) -> str:
    lines = [
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–µ–º #{event['id']}",
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event['title']}",
        f"–ú–µ—Å—Ç–æ: {event['location'] or '‚Äî'}",
        f"–°—Ç–∞—Ä—Ç: {event['starts_at'].astimezone(timezone.utc).strftime('%Y-%m-%d %H:%M UTC')}",
        "\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:",
    ]
    for p in participants:
        label = p["username"] or p["full_name"] or str(p["tg_id"])
        lines.append(f"‚Ä¢ {label} ‚Äî {p['status']}")
    return "\n".join(lines)


def format_summary(balances: dict[int, int], participants: list) -> str:
    lines = ["–°–≤–æ–¥–∫–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É:"]
    for participant in participants:
        uid = participant["user_id"]
        label = participant["username"] or participant["full_name"] or str(participant["tg_id"])
        balance = balances.get(uid, 0)
        lines.append(f"‚Ä¢ {label}: {balance / 100:.2f} EUR")
    return "\n".join(lines)


def build_expense_summary(expenses: list[dict]) -> list[str]:
    expense_lines = ["\n–†–∞—Å—Ö–æ–¥—ã:"]
    if not expenses:
        expense_lines.append("‚Ä¢ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤")
        return expense_lines

    for exp in expenses:
        payer = exp["payer_username"] or exp["payer_full_name"] or str(exp["payer_tg_id"])
        expense_lines.append(
            f"‚Ä¢ #{exp['id']} {exp['title']} ‚Äî {exp['amount_cents'] / 100:.2f} {exp['currency']} (–ø–ª–∞—Ç–∏–ª {payer})"
        )
    return expense_lines


async def build_summary_message(repo, event_id: int) -> str:
    participants = await repo.list_event_participants_with_status(event_id)
    expenses = await repo.get_event_expenses(event_id)
    going_ids = [p["user_id"] for p in participants if p["status"] == "going"]

    expense_shares = []
    for exp in expenses:
        items = await repo.get_expense_items(exp["id"])
        item_shares = [
            ExpenseItemShare(amount_cents=item["amount_cents"], consumers=item["consumers"] or going_ids)
            for item in items
        ] if not exp["is_shared"] else None
        expense_shares.append(
            ExpenseShare(
                payer_id=exp["payer_id"],
                amount_cents=exp["amount_cents"],
                is_shared=exp["is_shared"],
                going_participants=going_ids,
                items=item_shares,
            )
        )

    balances = calculate_balances(expense_shares)
    summary_text = format_summary(balances, participants)
    expense_lines = build_expense_summary(expenses)
    return "\n".join([summary_text, *expense_lines])


async def build_myevents_view(
    user_id: int,
    *,
    active_view: Optional[str] = None,
    direction: Optional[str] = None,
) -> tuple[str, InlineKeyboardMarkup]:
    repo = get_repo()
    settings = get_settings()

    owner_cards = build_event_cards(
        await repo.list_owner_events(user_id), settings.zoneinfo, True
    )
    participant_cards = build_event_cards(
        await repo.list_participant_events(user_id), settings.zoneinfo, False
    )

    views = {
        OWNER_VIEW: owner_cards,
        PARTICIPANT_VIEW: participant_cards,
    }

    if active_view is None:
        active_view = state.get_view(user_id)

    if not active_view or not views.get(active_view):
        if owner_cards:
            active_view = OWNER_VIEW
        elif participant_cards:
            active_view = PARTICIPANT_VIEW
        else:
            state.clear_user(user_id)
            return (
                "–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–º–∞–Ω–¥–æ–π /newevent.",
                build_events_keyboard(OWNER_VIEW, None),
            )

    cards = views[active_view]
    ids = [card.event_id for card in cards]

    current_event_id = state.get_view_event(user_id, active_view)
    if current_event_id not in ids:
        current_event_id = ids[0]

    try:
        idx = ids.index(current_event_id)
    except ValueError:
        idx = 0

    if direction == "prev" and idx > 0:
        idx -= 1
    elif direction == "next" and idx < len(ids) - 1:
        idx += 1

    current_card = cards[idx]
    state.set_view_event(user_id, active_view, current_card.event_id)

    title = "–†–∞–∑–¥–µ–ª ¬´–Ø –≤–ª–∞–¥–µ–ª–µ—Ü¬ª" if active_view == OWNER_VIEW else "–†–∞–∑–¥–µ–ª ¬´–Ø —É—á–∞—Å—Ç–Ω–∏–∫¬ª"
    body = format_event_card(current_card, settings.zoneinfo)
    status_label = humanize_status(current_card.status) if current_card.status else None

    keyboard = build_events_keyboard(
        active_view,
        current_card.event_id,
        status_label=status_label,
        has_prev=idx > 0,
        has_next=idx < len(cards) - 1,
    )

    return f"{title}\n\n{body}", keyboard


@events_router.message(Command("newevent"))
async def cmd_newevent(message: Message) -> None:
    repo = get_repo()
    parts = message.text.split("|", maxsplit=3) if message.text else []
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /newevent [–Ω–∞–∑–≤–∞–Ω–∏–µ] | [YYYY-MM-DD HH:MM TZ] | [–º–µ—Å—Ç–æ?] | [–∑–∞–º–µ—Ç–∫–∏?]")
        return

    title = parts[0].replace("/newevent", "").strip()
    raw_dt = parts[1].strip()
    location = parts[2].strip() if len(parts) > 2 else None
    notes = parts[3].strip() if len(parts) > 3 else None

    settings = get_settings()

    try:
        dt = parse_event_datetime(raw_dt, settings.zoneinfo)
    except ValueError:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
        return

    user = message.from_user
    if not user:
        return

    owner_id = await repo.ensure_user(user.id, user.username, user.full_name)

    event = await repo.create_event(owner_id, title, dt, location, notes)

    remind_at = dt - timedelta(days=3)
    await repo.create_reminder(event["id"], remind_at)

    await message.answer(
        f"–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {event['title']} {event['starts_at']}"
    )


@events_router.message(Command("myevents"))
async def cmd_myevents(message: Message) -> None:
    repo = get_repo()
    user = message.from_user
    if not user:
        return

    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    state.clear_user(user_id)
    text, keyboard = await build_myevents_view(user_id)
    await message.answer(text, reply_markup=keyboard)


@events_router.message(Command("status"))
async def cmd_status(message: Message) -> None:
    repo = get_repo()
    if not message.text:
        return
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /status [event_id] going|declined|maybe")
        return

    try:
        event_id = int(parts[1])
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è")
        return
    status = parts[2]
    if status not in {"going", "declined", "maybe"}:
        await message.answer("–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã: going, declined, maybe")
        return

    user = message.from_user
    if not user:
        return

    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    await assert_event_participant(repo.db, user_id, event_id)
    await repo.set_participant_status(event_id, user_id, status)
    await message.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")


@events_router.message(Command("invite"))
async def cmd_invite(message: Message) -> None:
    repo = get_repo()
    if not message.text:
        return
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /invite [event_id] @username")
        return

    event_id = int(parts[1])
    username = parts[2]
    user = message.from_user
    if not user:
        return

    current_user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    await assert_event_owner(repo.db, current_user_id, event_id)

    invited = await repo.get_user_by_username(username)
    if not invited:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—É—Å—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–µ—Ç –±–æ—Ç—É.")
        return

    await repo.set_participant_status(event_id, invited["id"], "invited")
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø—Ä–∏–≥–ª–∞—à—ë–Ω.")


@events_router.message(Command("summary"))
async def cmd_summary(message: Message) -> None:
    repo = get_repo()
    if not message.text:
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /summary [event_id]")
        return

    event_id = int(parts[1])

    user = message.from_user
    if not user:
        return

    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    await assert_event_participant(repo.db, user_id, event_id)

    summary_message = await build_summary_message(repo, event_id)
    await message.answer(summary_message)


@events_router.message(Command("settle"))
async def cmd_settle(message: Message) -> None:
    repo = get_repo()
    if not message.text:
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settle [event_id]")
        return

    event_id = int(parts[1])
    user = message.from_user
    if not user:
        return
    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    await assert_event_participant(repo.db, user_id, event_id)

    expenses = await repo.get_event_expenses(event_id)
    going_ids = [p["user_id"] for p in await repo.list_event_participants_with_status(event_id) if p["status"] == "going"]

    expense_shares = []
    for exp in expenses:
        items = await repo.get_expense_items(exp["id"])
        item_shares = [
            ExpenseItemShare(
                amount_cents=item["amount_cents"],
                consumers=item["consumers"] or going_ids,
            )
            for item in items
        ] if not exp["is_shared"] else None
        expense_shares.append(
            ExpenseShare(
                payer_id=exp["payer_id"],
                amount_cents=exp["amount_cents"],
                is_shared=exp["is_shared"],
                going_participants=going_ids,
                items=item_shares,
            )
        )

    balances = calculate_balances(expense_shares)
    transfers = settle(balances)

    lines = ["–î–ª—è —Å–≤–µ–¥–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤:"]
    for t in transfers:
        lines.append(f"‚Ä¢ {t.from_user} ‚Üí {t.to_user}: {t.amount_cents / 100:.2f} EUR")
    await message.answer("\n".join(lines))


@events_router.message(Command("manage"))
async def cmd_manage(message: Message) -> None:
    repo = get_repo()
    if not message.text:
        return
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /manage [event_id]")
        return

    try:
        event_id = int(parts[1])
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è")
        return

    user = message.from_user
    if not user:
        return

    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    await assert_event_owner(repo.db, user_id, event_id)
    state.set_view_event(user_id, OWNER_VIEW, event_id)

    text, keyboard = await build_myevents_view(user_id, active_view=OWNER_VIEW)
    await message.answer(text, reply_markup=keyboard)


@events_router.callback_query(F.data == "myevents_owner")
async def cb_myevents_owner(callback: CallbackQuery) -> None:
    user = callback.from_user
    if not user or not callback.message:
        return
    text, keyboard = await build_myevents_view(user.id, active_view=OWNER_VIEW)
    await callback.answer("–†–∞–∑–¥–µ–ª –≤–ª–∞–¥–µ–ª—å—Ü–∞")
    await callback.message.edit_text(text, reply_markup=keyboard)


@events_router.callback_query(F.data == "myevents_participant")
async def cb_myevents_participant(callback: CallbackQuery) -> None:
    user = callback.from_user
    if not user or not callback.message:
        return
    text, keyboard = await build_myevents_view(user.id, active_view=PARTICIPANT_VIEW)
    await callback.answer("–†–∞–∑–¥–µ–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞")
    await callback.message.edit_text(text, reply_markup=keyboard)


@events_router.callback_query(F.data.startswith("event_nav:"))
async def cb_event_nav(callback: CallbackQuery) -> None:
    user = callback.from_user
    if not user or not callback.message:
        return
    _, view, direction = callback.data.split(":")
    text, keyboard = await build_myevents_view(user.id, active_view=view, direction=direction)
    await callback.answer()
    await callback.message.edit_text(text, reply_markup=keyboard)


@events_router.callback_query(F.data.startswith("manage:"))
async def cb_manage(callback: CallbackQuery) -> None:
    user = callback.from_user
    if not user or not callback.message:
        return
    _, raw_event_id = callback.data.split(":")
    event_id = int(raw_event_id)

    repo = get_repo()
    event = await repo.get_event(event_id)
    participants = await repo.get_event_participants(event_id)
    text = format_event_details(event, participants)

    await callback.answer()
    await callback.message.edit_text(text, reply_markup=manage_keyboard(event_id))


@events_router.callback_query(F.data == "manage_back")
async def cb_manage_back(callback: CallbackQuery) -> None:
    user = callback.from_user
    if not user or not callback.message:
        return
    text, keyboard = await build_myevents_view(user.id, active_view=OWNER_VIEW)
    await callback.answer()
    await callback.message.edit_text(text, reply_markup=keyboard)


@events_router.callback_query(F.data.startswith("manage_edit:"))
async def cb_manage_edit(callback: CallbackQuery) -> None:
    user = callback.from_user
    if not user or not callback.message:
        return
    _, field, raw_event_id = callback.data.split(":")
    event_id = int(raw_event_id)

    prompts = {
        "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        "time": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM TZ:",
        "location": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å):",
        "notes": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å):",
    }
    state.set_pending_edit(user.id, event_id, field)
    await callback.answer()
    await callback.message.answer(f"#{event_id} {prompts[field]}")


@events_router.callback_query(F.data.startswith("manage_cancel:"))
async def cb_manage_cancel(callback: CallbackQuery) -> None:
    user = callback.from_user
    if not user or not callback.message:
        return
    _, raw_event_id = callback.data.split(":")
    event_id = int(raw_event_id)

    repo = get_repo()
    await repo.cancel_event(event_id)
    await callback.answer("–°–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    text, keyboard = await build_myevents_view(user.id, active_view=OWNER_VIEW)
    await callback.message.edit_text(text, reply_markup=keyboard)


@events_router.callback_query(F.data.startswith("manage_remove:"))
async def cb_manage_remove(callback: CallbackQuery) -> None:
    user = callback.from_user
    if not user or not callback.message:
        return
    _, raw_event_id = callback.data.split(":")
    event_id = int(raw_event_id)

    repo = get_repo()
    participants = await repo.get_event_participants(event_id)
    lines = ["–ö–æ–≥–æ —É–¥–∞–ª–∏—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ /remove <event_id> @username", "\n–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:"]
    for p in participants:
        label = p["username"] or p["full_name"] or str(p["tg_id"])
        lines.append(f"‚Ä¢ {label} ‚Äî {p['status']}")

    await callback.answer()
    await callback.message.answer("\n".join(lines))


@events_router.message(Command("invitelink"))
async def cmd_invitelink(message: Message) -> None:
    repo = get_repo()
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /invitelink [event_id] [--max=N] [--ttl=hours]")
        return

    try:
        event_id = int(parts[1])
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π event_id")
        return

    user = message.from_user
    if not user:
        return

    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    await assert_event_owner(repo.db, user_id, event_id)

    max_uses: Optional[int] = None
    ttl_hours: Optional[int] = None
    for arg in parts[2:]:
        if arg.startswith("--max="):
            max_uses = int(arg.split("=", 1)[1])
        if arg.startswith("--ttl="):
            ttl_hours = int(arg.split("=", 1)[1])

    token = secrets.token_urlsafe(8)
    expires_at = None
    if ttl_hours:
        expires_at = datetime.now(timezone.utc) + timedelta(hours=ttl_hours)

    link = await repo.add_invite_link(event_id, token, max_uses, expires_at)
    await message.answer(f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n/join {link['token']}")


@events_router.message(Command("join"))
async def cmd_join(message: Message) -> None:
    repo = get_repo()
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /join [token]")
        return

    token = parts[1]
    link = await repo.get_invite_link_by_token(token)
    if not link:
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
        return

    if link["expires_at"] and link["expires_at"] < datetime.now(timezone.utc):
        await message.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç—ë–∫")
        return

    if link["max_uses"] and link["uses"] >= link["max_uses"]:
        await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
        return

    user = message.from_user
    if not user:
        return

    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    await repo.set_participant_status(link["event_id"], user_id, "invited")
    await repo.increment_invite_use(link["id"])
    await message.answer("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–æ–±—ã—Ç–∏—é! –û–±–Ω–æ–≤–∏—Ç–µ /myevents")


@events_router.callback_query(F.data.startswith("invite:"))
async def cb_invite(callback: CallbackQuery) -> None:
    user = callback.from_user
    if not user or not callback.message:
        return
    _, raw_event_id = callback.data.split(":")
    event_id = int(raw_event_id)

    text = (
        "–ß—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É /invitelink"
        f" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /invitelink {event_id}"
    )
    await callback.answer()
    await callback.message.answer(text)


@events_router.callback_query(F.data.startswith("cycle_status:"))
async def cb_cycle_status(callback: CallbackQuery) -> None:
    user = callback.from_user
    if not user or not callback.message:
        return
    repo = get_repo()
    _, raw_event_id = callback.data.split(":")
    event_id = int(raw_event_id)

    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    participant = await repo.get_participant(event_id, user_id)
    if not participant:
        await callback.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è", show_alert=True)
        return

    current_status = ParticipantStatus(participant["status"])
    new_status = next_status(current_status)

    await repo.set_participant_status(event_id, user_id, new_status.value)
    text, keyboard = await build_myevents_view(user_id, active_view=PARTICIPANT_VIEW)
    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")
    await callback.message.edit_text(text, reply_markup=keyboard)


@events_router.message(Command("transfer_ownership"))
async def cmd_transfer_ownership(message: Message) -> None:
    repo = get_repo()
    if not message.text:
        return
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /transfer_ownership [event_id] @username")
        return

    try:
        event_id = int(parts[1])
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π event_id")
        return

    username = parts[2]
    user = message.from_user
    if not user:
        return

    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    await assert_event_owner(repo.db, user_id, event_id)

    new_owner = await repo.get_user_by_username(username)
    if not new_owner:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start.")
        return

    await repo.transfer_ownership(event_id, new_owner["id"])
    await message.answer("–í–ª–∞–¥–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–µ–º –ø–µ—Ä–µ–¥–∞–Ω–æ.")


@events_router.message(Command("remove"))
async def cmd_remove(message: Message) -> None:
    repo = get_repo()
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove [event_id] @username")
        return

    try:
        event_id = int(parts[1])
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π event_id")
        return

    username = parts[2]
    user = message.from_user
    if not user:
        return

    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    await assert_event_owner(repo.db, user_id, event_id)

    target = await repo.get_user_by_username(username)
    if not target:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await repo.remove_participant(event_id, target["id"])
    await message.answer("–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª—ë–Ω")


## –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –±–ª–æ–∫ /invitelink —É–¥–∞–ª—ë–Ω –Ω–∏–∂–µ
## –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –±–ª–æ–∫ /join —É–¥–∞–ª—ë–Ω –Ω–∏–∂–µ
## –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –±–ª–æ–∫ callback invite: —É–¥–∞–ª—ë–Ω –Ω–∏–∂–µ
## –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –±–ª–æ–∫ callback cycle_status: —É–¥–∞–ª—ë–Ω –Ω–∏–∂–µ
    repo = get_repo()
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /invitelink [event_id] [--max=N] [--ttl=hours]")
        return

    try:
        event_id = int(parts[1])
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π event_id")
        return

    user = message.from_user
    if not user:
        return

    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    await assert_event_owner(repo.db, user_id, event_id)

    max_uses: Optional[int] = None
    ttl_hours: Optional[int] = None
    for arg in parts[2:]:
        if arg.startswith("--max="):
            max_uses = int(arg.split("=", 1)[1])
        if arg.startswith("--ttl="):
            ttl_hours = int(arg.split("=", 1)[1])

    token = secrets.token_urlsafe(8)
    expires_at = None
    if ttl_hours:
        expires_at = datetime.now(timezone.utc) + timedelta(hours=ttl_hours)

    link = await repo.add_invite_link(event_id, token, max_uses, expires_at)
    await message.answer(f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: /join {link['token']}")


@events_router.message(Command("join"))
async def cmd_join(message: Message) -> None:
    repo = get_repo()
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /join [token]")
        return

    token = parts[1]
    link = await repo.get_invite_link_by_token(token)
    if not link:
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
        return

    if link["expires_at"] and link["expires_at"] < datetime.now(timezone.utc):
        await message.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç—ë–∫")
        return

    if link["max_uses"] and link["uses"] >= link["max_uses"]:
        await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
        return

    user = message.from_user
    if not user:
        return

    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    await repo.set_participant_status(link["event_id"], user_id, "invited")
    await repo.increment_invite_use(link["id"])
    await message.answer("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–æ–±—ã—Ç–∏—é! –û–±–Ω–æ–≤–∏—Ç–µ /myevents")


@events_router.callback_query(F.data.startswith("invite:"))
async def cb_invite(callback: CallbackQuery) -> None:
    user = callback.from_user
    if not user or not callback.message:
        return
    _, raw_event_id = callback.data.split(":")
    event_id = int(raw_event_id)

    text = (
        "–ß—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–º–∞–Ω–¥—É /invitelink"
        f" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /invitelink {event_id}"
    )
    await callback.answer()
    await callback.message.answer(text)


@events_router.callback_query(F.data.startswith("cycle_status:"))
async def cb_cycle_status(callback: CallbackQuery) -> None:
    user = callback.from_user
    if not user or not callback.message:
        return
    repo = get_repo()
    _, raw_event_id = callback.data.split(":")
    event_id = int(raw_event_id)

    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    participant = await repo.get_participant(event_id, user_id)
    if not participant:
        await callback.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–±—ã—Ç–∏—è", show_alert=True)
        return

    current_status = ParticipantStatus(participant["status"])
    new_status = next_status(current_status)

    await repo.set_participant_status(event_id, user_id, new_status.value)
    text, keyboard = await build_myevents_view(user_id, active_view=PARTICIPANT_VIEW)
    await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")
    await callback.message.edit_text(text, reply_markup=keyboard)


@events_router.callback_query(F.data.startswith("summary:"))
async def cb_summary(callback: CallbackQuery) -> None:
    user = callback.from_user
    if not user or not callback.message:
        return
    _, raw_event_id = callback.data.split(":")
    event_id = int(raw_event_id)

    repo = get_repo()
    summary_message = await build_summary_message(repo, event_id)

    await callback.answer()
    await callback.message.answer(summary_message)


async def handle_create_event_input(message: Message, repo, user) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    if not message.text:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç")
        return
    
    step = state.get_event_step(user.id)
    text = message.text.strip()
    
    # –®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ
    if step == "title":
        state.set_event_data(user.id, "title", text)
        state.set_event_step(user.id, "datetime")
        
        await message.answer(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n"
            "üìÖ <b>–®–∞–≥ 2/4: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</b>\n\n"
            "–ö–æ–≥–¥–∞ –ø—Ä–æ–π–¥—ë—Ç —Å–æ–±—ã—Ç–∏–µ?\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ <code>20 –¥–µ–∫–∞–±—Ä—è 2025 19:00</code>\n"
            "‚Ä¢ <code>20.12.2025 19:00</code>\n"
            "‚Ä¢ <code>31/12/2025 23:59</code>\n\n"
            "–¢–∞–π–º–∑–æ–Ω–∞: <b>–ú–æ—Å–∫–≤–∞ (+3)</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu:cancel_create")]
            ])
        )
        return
    
    # –®–∞–≥ 2: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    elif step == "datetime":
        try:
            dt = parse_russian_date(text)
            state.set_event_data(user.id, "datetime", dt.isoformat())
            state.set_event_step(user.id, "location")
            
            await message.answer(
                "‚úÖ –î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                "üìç <b>–®–∞–≥ 3/4: –ú–µ—Å—Ç–æ</b>\n\n"
                "–ì–¥–µ –ø—Ä–æ–π–¥—ë—Ç —Å–æ–±—ã—Ç–∏–µ?\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ö–∞—Ñ–µ –ü—É—à–∫–∏–Ω</i> –∏–ª–∏ <i>–û—Ñ–∏—Å –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π</i>",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="event:skip_location")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu:cancel_create")]
                ])
            )
        except ValueError as e:
            await message.answer(
                "‚ùå –ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É!\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑—É–π –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:</b>\n"
                "‚Ä¢ 20 –¥–µ–∫–∞–±—Ä—è 2025 19:00\n"
                "‚Ä¢ 20.12.2025 19:00\n"
                "‚Ä¢ 31/12/2025 23:59\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu:cancel_create")]
                ])
            )
        return
    
    # –®–∞–≥ 3: –ú–µ—Å—Ç–æ
    elif step == "location":
        state.set_event_data(user.id, "location", text)
        state.set_event_step(user.id, "notes")
        
        await message.answer(
            "‚úÖ –ú–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            "üìã <b>–®–∞–≥ 4/4: –ó–∞–º–µ—Ç–∫–∏</b>\n\n"
            "–ï—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ü—Ä–∏–Ω–æ—Å–∏—Ç–µ –ø–æ–¥–∞—Ä–∫–∏!</i> –∏–ª–∏ <i>–î—Ä–µ—Å—Å-–∫–æ–¥: casual</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="event:skip_notes")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="menu:cancel_create")]
            ])
        )
        return
    
    # –®–∞–≥ 4: –ó–∞–º–µ—Ç–∫–∏ - —Å–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ
    elif step == "notes":
        state.set_event_data(user.id, "notes", text)
        await create_event_from_data(message, repo, user)
        return


async def create_event_from_data(message: Message, repo, user) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    data = state.get_event_data(user.id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state.clear_creating_event(user.id)
    state.clear_event_data(user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    title = data.get("title", "")
    dt_str = data.get("datetime", "")
    location = data.get("location")
    notes = data.get("notes")
    
    if not title or not dt_str:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    dt = datetime.fromisoformat(dt_str)
    
    # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ
    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    event = await repo.create_event(
        owner_id=user_id,
        title=title,
        starts_at=dt,
        location=location,
        notes=notes,
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
    event_text = (
        f"‚úÖ <b>–°–æ–±—ã—Ç–∏–µ #{event['id']} —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {dt.strftime('%d.%m.%Y %H:%M')} –ú–°–ö\n"
    )
    if location:
        event_text += f"üìç <b>–ú–µ—Å—Ç–æ:</b> {location}\n"
    if notes:
        event_text += f"üìã <b>–ó–∞–º–µ—Ç–∫–∏:</b> {notes}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–µ–º", callback_data=f"owner:{event['id']}")],
        [InlineKeyboardButton(text="üìÖ –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è", callback_data="menu:myevents")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="menu:main")]
    ])
    
    await message.answer(event_text, reply_markup=keyboard)


@events_router.message(F.text & ~F.text.startswith("/"))
async def handle_text_input(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user = message.from_user
    if not user:
        return
    
    repo = get_repo()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞—ë—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–µ
    if state.is_creating_event(user.id):
        await handle_create_event_input(message, repo, user)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pending edit
    pending = state.pop_pending_edit(user.id)
    if not pending:
        return

    event_id, field = pending
    user_id = await repo.ensure_user(user.id, user.username, user.full_name)
    await assert_event_owner(repo.db, user_id, event_id)

    value = message.text.strip() if message.text else ""
    if field == "time":
        settings = get_settings()
        try:
            value_dt = parse_event_datetime(value, settings.zoneinfo)
        except ValueError:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            state.set_pending_edit(user.id, event_id, field)
            return
        await repo.update_event_field(event_id, "starts_at", value_dt)
    elif field in {"title", "location", "notes"}:
        if value == "-":
            value = None
        await repo.update_event_field(event_id, field, value)
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    await message.answer("–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    text, keyboard = await build_myevents_view(user_id, active_view=OWNER_VIEW)
    await message.answer(text, reply_markup=keyboard)

