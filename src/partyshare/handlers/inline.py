"""Inline-—Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""

import secrets
from aiogram import Router
from aiogram.types import (
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from partyshare.config import get_settings
from partyshare.db.repo import get_global_repository

inline_router = Router()


@inline_router.inline_query()
async def inline_query_handler(inline_query: InlineQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞ —Å–æ–±—ã—Ç–∏—è."""
    user = inline_query.from_user
    query = inline_query.query.strip()
    
    results = []
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "invite_", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    if query.startswith("invite_"):
        try:
            event_id = int(query.split("_")[1])
            repo = get_global_repository()
            event = await repo.get_event(event_id)
            
            if event:
                # –ü–æ–ª—É—á–∞–µ–º user_id
                repo_user_id = await repo.ensure_user(user.id, user.username, user.full_name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü —Å–æ–±—ã—Ç–∏—è
                if event['owner_id'] == repo_user_id:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º invite link
                    invite = await repo.get_invite_link(event_id)
                    
                    if not invite:
                        token = secrets.token_urlsafe(16)
                        invite = await repo.add_invite_link(
                            event_id=event_id,
                            token=token,
                            max_uses=None,
                            expires_at=None
                        )
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    settings = get_settings()
                    local_dt = event['starts_at'].astimezone(settings.zoneinfo)
                    date_str = local_dt.strftime("%d.%m.%Y –≤ %H:%M")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                    invite_text = (
                        f"üéâ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ!</b>\n\n"
                        f"<b>{event['title']}</b>\n\n"
                        f"üìÖ <b>–ö–æ–≥–¥–∞:</b> {date_str}\n"
                    )
                    
                    if event.get('location'):
                        invite_text += f"üìç <b>–ì–¥–µ:</b> {event['location']}\n"
                    
                    if event.get('notes'):
                        invite_text += f"\nüìã {event['notes']}\n"
                    
                    invite_text += "\nüëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!"
                    
                    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(
                            text="‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–±—ã—Ç–∏—é",
                            url=f"https://t.me/{inline_query.bot.username}?start=invite_{invite['token']}"
                        )]
                    ])
                    
                    # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result = InlineQueryResultArticle(
                        id=f"invite_{event_id}",
                        title=f"üéâ {event['title']}",
                        description=f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ {date_str}",
                        input_message_content=InputTextMessageContent(
                            message_text=invite_text,
                            parse_mode="HTML"
                        ),
                        reply_markup=keyboard,
                        thumbnail_url="https://telegram.org/img/t_logo.png"
                    )
                    
                    results.append(result)
        except (ValueError, IndexError):
            pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await inline_query.answer(
        results,
        cache_time=10,
        is_personal=True
    )

